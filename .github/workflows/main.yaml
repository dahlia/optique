name: main
on: [push, pull_request]

jobs:
  test-node:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - run: |
        wget -q https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://apt.fury.io/nushell/gpg.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/fury-nushell.gpg
        echo "deb https://apt.fury.io/nushell/ /" | sudo tee /etc/apt/sources.list.d/fury.list
        sudo apt-get update
        sudo apt-get install -y fish nushell powershell zsh
    - uses: pnpm/action-setup@v4
      with:
        version: latest
        run_install: true
    - uses: actions/setup-node@v4
      with:
        node-version: latest
    - run: pnpm run -r test

  test-deno:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - run: |
        wget -q https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://apt.fury.io/nushell/gpg.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/fury-nushell.gpg
        echo "deb https://apt.fury.io/nushell/ /" | sudo tee /etc/apt/sources.list.d/fury.list
        sudo apt-get update
        sudo apt-get install -y fish nushell powershell zsh
    - uses: denoland/setup-deno@v2
      with:
        deno-version: v2.x
    - run: deno task test --coverage --junit-path=junit.xml
    - if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: junit.xml
    - uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage/lcov.info

  test-bun:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - run: |
        wget -q https://packages.microsoft.com/config/ubuntu/24.04/packages-microsoft-prod.deb
        sudo dpkg -i packages-microsoft-prod.deb
        sudo mkdir -p /etc/apt/keyrings
        curl -fsSL https://apt.fury.io/nushell/gpg.key | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/fury-nushell.gpg
        echo "deb https://apt.fury.io/nushell/ /" | sudo tee /etc/apt/sources.list.d/fury.list
        sudo apt-get update
        sudo apt-get install -y fish nushell powershell zsh
    - uses: pnpm/action-setup@v4
      with:
        version: latest
        run_install: true
    - uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest
    - run: pnpm run -r test:bun

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v2
      with:
        deno-version: v2.x
    - run: deno task check

  publish:
    if: github.event_name == 'push'
    needs: [test-node, test-deno, test-bun, check]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - uses: denoland/setup-deno@v2
      with:
        deno-version: v2.x
    - uses: pnpm/action-setup@v4
      with:
        version: latest
        run_install: true
    - run: |
        set -ex
        if [[ "$GITHUB_REF_TYPE" == tag ]]; then
          deno task check-versions
          [[ "$(jq -r '.version' packages/core/deno.json)" == "$GITHUB_REF_NAME" ]]
        else
          jq \
            --arg build "$GITHUB_RUN_NUMBER" \
            --arg commit "${GITHUB_SHA::8}" \
            '.version = .version + "-dev." + $build + "+" + $commit' \
            packages/core/deno.json > /tmp/deno.json
          mv /tmp/deno.json packages/core/deno.json
          deno task check-versions --fix
        fi
    - run: |
        set -ex
        deno publish --allow-dirty
        pnpm config set //registry.npmjs.org/:_authToken "$NPM_AUTH_TOKEN"
        if [[ "$GITHUB_REF_TYPE" == tag ]]; then
          pnpm publish \
            --recursive \
            --no-git-checks \
            --access public \
            --force
        else
          pnpm publish \
            --recursive \
            --no-git-checks \
            --access public \
            --force \
            --tag dev
        fi
      env:
        NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
        NPM_CONFIG_PROVENANCE: "true"

  public-docs:
    if: github.event_name == 'push'
    needs: [publish]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      pages: write
      deployments: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
    - uses: actions/checkout@v4
    - uses: pnpm/action-setup@v4
      with:
        version: latest
        run_install: true
    - uses: actions/setup-node@v4
      with:
        node-version: latest
    - run: |
        set -ex
        if [[ "$GITHUB_REF_TYPE" = "tag" ]]; then
          EXTRA_NAV_TEXT=Unstable \
          EXTRA_NAV_LINK="$UNSTABLE_DOCS_URL" \
          SITEMAP_HOSTNAME="$STABLE_DOCS_URL" \
          JSR_REF_VERSION=stable \
          pnpm build
        else
          EXTRA_NAV_TEXT=Stable \
          EXTRA_NAV_LINK="$STABLE_DOCS_URL" \
          SITEMAP_HOSTNAME="$UNSTABLE_DOCS_URL" \
          JSR_REF_VERSION=unstable \
          pnpm build
        fi
      env:
        STABLE_DOCS_URL: ${{ vars.STABLE_DOCS_URL }}
        UNSTABLE_DOCS_URL: ${{ vars.UNSTABLE_DOCS_URL }}
        SITEMAP_HOSTNAME: ${{ vars.SITEMAP_HOSTNAME }}
        PLAUSIBLE_DOMAIN: ${{ vars.PLAUSIBLE_DOMAIN }}
        ALGOLIA_APP_ID: ${{ secrets.ALGOLIA_APP_ID }}
        ALGOLIA_API_KEY: ${{ secrets.ALGOLIA_API_KEY }}
        ALGOLIA_INDEX_NAME: ${{ secrets.ALGOLIA_INDEX_NAME }}
      working-directory: docs
    - uses: actions/upload-pages-artifact@v3
      with:
        path: docs/.vitepress/dist
    - id: deployment
      if: github.ref_type == 'tag'
      uses: actions/deploy-pages@v4
    - if: github.ref_type == 'branch'
      uses: cloudflare/wrangler-action@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        gitHubToken: ${{ github.token }}
        command: >-
          pages deploy .vitepress/dist
          --project-name=${{ vars.CLOUDFLARE_PROJECT_NAME }}
        packageManager: pnpm
        workingDirectory: ${{ github.workspace }}/docs/

# cSpell: ignore dpkg keyrings dearmor denoland npmjs vitepress
